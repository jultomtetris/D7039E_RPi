// Generated by gencpp from file intelli_mower/MowerStats.msg
// DO NOT EDIT!


#ifndef INTELLI_MOWER_MESSAGE_MOWERSTATS_H
#define INTELLI_MOWER_MESSAGE_MOWERSTATS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace intelli_mower
{
template <class ContainerAllocator>
struct MowerStats_
{
  typedef MowerStats_<ContainerAllocator> Type;

  MowerStats_()
    : header()
    , command()
    , bumperFront()
    , bumperBack()
    , emergency()
    , cutter()
    , lift()
    , leftSpeed(0.0)
    , rightSpeed(0.0)
    , outerRight(0.0)
    , innerRight(0.0)
    , innerLeft(0.0)
    , outerLeft(0.0)
    , xPos(0.0)
    , yPos(0.0)
    , heading(0.0)  {
    }
  MowerStats_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , command(_alloc)
    , bumperFront(_alloc)
    , bumperBack(_alloc)
    , emergency(_alloc)
    , cutter(_alloc)
    , lift(_alloc)
    , leftSpeed(0.0)
    , rightSpeed(0.0)
    , outerRight(0.0)
    , innerRight(0.0)
    , innerLeft(0.0)
    , outerLeft(0.0)
    , xPos(0.0)
    , yPos(0.0)
    , heading(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  _command_type command;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _bumperFront_type;
  _bumperFront_type bumperFront;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _bumperBack_type;
  _bumperBack_type bumperBack;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _emergency_type;
  _emergency_type emergency;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cutter_type;
  _cutter_type cutter;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _lift_type;
  _lift_type lift;

   typedef double _leftSpeed_type;
  _leftSpeed_type leftSpeed;

   typedef double _rightSpeed_type;
  _rightSpeed_type rightSpeed;

   typedef double _outerRight_type;
  _outerRight_type outerRight;

   typedef double _innerRight_type;
  _innerRight_type innerRight;

   typedef double _innerLeft_type;
  _innerLeft_type innerLeft;

   typedef double _outerLeft_type;
  _outerLeft_type outerLeft;

   typedef double _xPos_type;
  _xPos_type xPos;

   typedef double _yPos_type;
  _yPos_type yPos;

   typedef double _heading_type;
  _heading_type heading;




  typedef boost::shared_ptr< ::intelli_mower::MowerStats_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::intelli_mower::MowerStats_<ContainerAllocator> const> ConstPtr;

}; // struct MowerStats_

typedef ::intelli_mower::MowerStats_<std::allocator<void> > MowerStats;

typedef boost::shared_ptr< ::intelli_mower::MowerStats > MowerStatsPtr;
typedef boost::shared_ptr< ::intelli_mower::MowerStats const> MowerStatsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::intelli_mower::MowerStats_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::intelli_mower::MowerStats_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace intelli_mower

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'intelli_mower': ['/home/pi/catkin_ws/src/intelli_mower/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::intelli_mower::MowerStats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::intelli_mower::MowerStats_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::intelli_mower::MowerStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::intelli_mower::MowerStats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::intelli_mower::MowerStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::intelli_mower::MowerStats_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::intelli_mower::MowerStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "279c6ecbaca551e207950878b3b76dbd";
  }

  static const char* value(const ::intelli_mower::MowerStats_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x279c6ecbaca551e2ULL;
  static const uint64_t static_value2 = 0x07950878b3b76dbdULL;
};

template<class ContainerAllocator>
struct DataType< ::intelli_mower::MowerStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "intelli_mower/MowerStats";
  }

  static const char* value(const ::intelli_mower::MowerStats_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::intelli_mower::MowerStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
string command\n\
string bumperFront\n\
string bumperBack\n\
string emergency\n\
string cutter\n\
string lift\n\
float64 leftSpeed\n\
float64 rightSpeed\n\
float64 outerRight\n\
float64 innerRight\n\
float64 innerLeft\n\
float64 outerLeft\n\
float64 xPos\n\
float64 yPos\n\
float64 heading\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::intelli_mower::MowerStats_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::intelli_mower::MowerStats_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.command);
      stream.next(m.bumperFront);
      stream.next(m.bumperBack);
      stream.next(m.emergency);
      stream.next(m.cutter);
      stream.next(m.lift);
      stream.next(m.leftSpeed);
      stream.next(m.rightSpeed);
      stream.next(m.outerRight);
      stream.next(m.innerRight);
      stream.next(m.innerLeft);
      stream.next(m.outerLeft);
      stream.next(m.xPos);
      stream.next(m.yPos);
      stream.next(m.heading);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MowerStats_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::intelli_mower::MowerStats_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::intelli_mower::MowerStats_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command);
    s << indent << "bumperFront: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.bumperFront);
    s << indent << "bumperBack: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.bumperBack);
    s << indent << "emergency: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.emergency);
    s << indent << "cutter: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cutter);
    s << indent << "lift: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.lift);
    s << indent << "leftSpeed: ";
    Printer<double>::stream(s, indent + "  ", v.leftSpeed);
    s << indent << "rightSpeed: ";
    Printer<double>::stream(s, indent + "  ", v.rightSpeed);
    s << indent << "outerRight: ";
    Printer<double>::stream(s, indent + "  ", v.outerRight);
    s << indent << "innerRight: ";
    Printer<double>::stream(s, indent + "  ", v.innerRight);
    s << indent << "innerLeft: ";
    Printer<double>::stream(s, indent + "  ", v.innerLeft);
    s << indent << "outerLeft: ";
    Printer<double>::stream(s, indent + "  ", v.outerLeft);
    s << indent << "xPos: ";
    Printer<double>::stream(s, indent + "  ", v.xPos);
    s << indent << "yPos: ";
    Printer<double>::stream(s, indent + "  ", v.yPos);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTELLI_MOWER_MESSAGE_MOWERSTATS_H
